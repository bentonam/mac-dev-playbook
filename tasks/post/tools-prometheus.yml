---
- name: Make sure Downloads Directory exists
  ansible.builtin.file:
    state: directory
    path: "{{ downloads }}"

- name: Check if Prometheus is installed already
  stat:
    path: /usr/local/bin/promtool
  register: prometheus_check

- name: Install prometheus
  block:
    - name: Get the latest published Prometheus  # noqa command-instead-of-module
      # this will need to be changed from /releases to /releases/latest once a GA release has been made
      ansible.builtin.shell: |
        curl -s https://api.github.com/repos/prometheus/prometheus/releases/latest \
          | grep -m 1 tag_name \
          | cut -d '"' -f 4 | cut -c 2-
      changed_when: false
      run_once: true
      register: _prometheus_request

    - name: Set the Prometheus Version
      ansible.builtin.set_fact:
        prometheus_version: "{{ _prometheus_request.stdout | string }}"

    - name: Prometheus Version
      ansible.builtin.debug:
        msg: "Prometheus Version: {{ prometheus_version }}"

    - name: Set the Prometheus Download URL
      ansible.builtin.set_fact:
        prometheus_download_url: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.darwin-amd64.tar.gz"

    - name: Download Prometheus and Unarchive to local folder
      ansible.builtin.unarchive:
        src: "{{ prometheus_download_url }}"
        dest: "{{ downloads }}"
        remote_src: true

    - name: Copy Prometheus Binaries
      become: true
      ansible.builtin.copy:
        src: "{{ downloads }}/prometheus-{{ prometheus_version }}.darwin-amd64/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        mode: 0755
        owner: root
        group: wheel
      with_items:
        - prometheus
        - promtool

    - name: Cleanup Prometheus Files
      ansible.builtin.file:
        state: absent
        path: "{{ downloads }}/prometheus-{{ prometheus_version }}.darwin-amd64"
      with_items:
        - "{{ downloads }}/prometheus-{{ prometheus_version }}.darwin-amd64"
        - "{{ downloads }}/prometheus-{{ prometheus_version }}.darwin-amd64.tar.gz"

  when: not prometheus_check.stat.exists

- name: Check if alertmanager is installed already
  stat:
    path: /usr/local/bin/amtool
  register: alertmanager_check

- name: Install alertmanager
  block:
    - name: Get the latest published alertmanager  # noqa command-instead-of-module
      # this will need to be changed from /releases to /releases/latest once a GA release has been made
      ansible.builtin.shell: |
        curl -s https://api.github.com/repos/prometheus/alertmanager/releases/latest \
          | grep -m 1 tag_name \
          | cut -d '"' -f 4 | cut -c 2-
      changed_when: false
      run_once: true
      register: _alertmanager_request

    - name: Set the alertmanager Version
      ansible.builtin.set_fact:
        alertmanager_version: "{{ _alertmanager_request.stdout | string }}"

    - name: Alertmanager Version
      ansible.builtin.debug:
        msg: "Alertmanager Version: {{ alertmanager_version }}"

    - name: Set the alertmanager Download URL
      ansible.builtin.set_fact:
        alertmanager_download_url: "https://github.com/prometheus/alertmanager/releases/download/v{{ alertmanager_version }}/alertmanager-{{ alertmanager_version }}.darwin-amd64.tar.gz"

    - name: Download alertmanager to local folder
      ansible.builtin.get_url:
        url: "{{ alertmanager_download_url }}"
        dest: "{{ downloads }}"
      register: _download_binary
      until: _download_binary is succeeded
      retries: 5
      delay: 2
      check_mode: false

    - name: Download Alertmanager and Unarchive to local folder
      ansible.builtin.unarchive:
        src: "{{ alertmanager_download_url }}"
        dest: "{{ downloads }}"
        remote_src: true

    - name: Copy alertmanager Binaries
      become: true
      ansible.builtin.copy:
        src: "{{ downloads }}/alertmanager-{{ alertmanager_version }}.darwin-amd64/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        mode: 0755
        owner: root
        group: wheel
      with_items:
        - alertmanager
        - amtool

    - name: Cleanup Alertmanager Files
      ansible.builtin.file:
        state: absent
        path: "{{ downloads }}/alertmanager-{{ alertmanager_version }}.darwin-amd64"
      with_items:
        - "{{ downloads }}/alertmanager-{{ alertmanager_version }}.darwin-amd64"
        - "{{ downloads }}/alertmanager-{{ alertmanager_version }}.darwin-amd64.tar.gz"

  when: not alertmanager_check.stat.exists

- name: Check if promlens is installed already
  stat:
    path: /usr/local/bin/promlens
  register: promlens_check

- name: Install promlens
  block:
    - name: Get the latest published promlens  # noqa command-instead-of-module
      # this will need to be changed from /releases to /releases/latest once a GA release has been made
      ansible.builtin.shell: |
        curl -s https://api.github.com/repos/prometheus/promlens/releases/latest \
          | grep -m 1 tag_name \
          | cut -d '"' -f 4 | cut -c 2-
      changed_when: false
      run_once: true
      register: _promlens_request

    - name: Set the promlens Version
      ansible.builtin.set_fact:
        promlens_version: "{{ _promlens_request.stdout | string }}"

    - name: Promlens Version
      ansible.builtin.debug:
        msg: "Promlens Version: {{ promlens_version }}"

    - name: Set the promlens Download URL
      ansible.builtin.set_fact:
        promlens_download_url: "https://github.com/prometheus/promlens/releases/download/v{{ promlens_version }}/promlens-{{ promlens_version }}.darwin-amd64.tar.gz"

    - name: Download promlens to local folder
      ansible.builtin.get_url:
        url: "{{ promlens_download_url }}"
        dest: "{{ downloads }}"
      register: _download_binary
      until: _download_binary is succeeded
      retries: 5
      delay: 2
      check_mode: false

    - name: Download promlens and Unarchive to local folder
      ansible.builtin.unarchive:
        src: "{{ promlens_download_url }}"
        dest: "{{ downloads }}"
        remote_src: true

    - name: Copy promlens Binaries
      become: true
      ansible.builtin.copy:
        src: "{{ downloads }}/promlens-{{ promlens_version }}.darwin-amd64/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        mode: 0755
        owner: root
        group: wheel
      with_items:
        - promlens

    - name: Cleanup promlens Files
      ansible.builtin.file:
        state: absent
        path: "{{ downloads }}/promlens-{{ promlens_version }}.darwin-amd64"
      with_items:
        - "{{ downloads }}/promlens-{{ promlens_version }}.darwin-amd64"
        - "{{ downloads }}/promlens-{{ promlens_version }}.darwin-amd64.tar.gz"

  when: not promlens_check.stat.exists

- name: Check if node_exporter is installed already
  stat:
    path: /usr/local/bin/node_exporter
  register: node_exporter_check

- name: Install node_exporter
  block:
    - name: Get the latest published node_exporter  # noqa command-instead-of-module
      # this will need to be changed from /releases to /releases/latest once a GA release has been made
      ansible.builtin.shell: |
        curl -s https://api.github.com/repos/prometheus/node_exporter/releases/latest \
          | grep -m 1 tag_name \
          | cut -d '"' -f 4 | cut -c 2-
      changed_when: false
      run_once: true
      register: _node_exporter_request

    - name: Set the node_exporter Version
      ansible.builtin.set_fact:
        node_exporter_version: "{{ _node_exporter_request.stdout | string }}"

    - name: Node Exporter Version
      ansible.builtin.debug:
        msg: "Node Exporter Version: {{ node_exporter }}"

    - name: Set the node_exporter Download URL
      ansible.builtin.set_fact:
        node_exporter_download_url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.darwin-amd64.tar.gz"

    - name: Download node_exporter to local folder
      ansible.builtin.get_url:
        url: "{{ node_exporter_download_url }}"
        dest: "{{ downloads }}"
      register: _download_binary
      until: _download_binary is succeeded
      retries: 5
      delay: 2
      check_mode: false

    - name: Download node_exporter and Unarchive to local folder
      ansible.builtin.unarchive:
        src: "{{ node_exporter_download_url }}"
        dest: "{{ downloads }}"
        remote_src: true

    - name: Copy node_exporter Binaries
      become: true
      ansible.builtin.copy:
        src: "{{ downloads }}/node_exporter-{{ node_exporter_version }}.darwin-amd64/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        mode: 0755
        owner: root
        group: wheel
      with_items:
        - node_exporter

    - name: Cleanup node_exporter Files
      ansible.builtin.file:
        state: absent
        path: "{{ downloads }}/node_exporter-{{ node_exporter_version }}.darwin-amd64"
      with_items:
        - "{{ downloads }}/node_exporter-{{ node_exporter_version }}.darwin-amd64"
        - "{{ downloads }}/node_exporter-{{ node_exporter_version }}.darwin-amd64.tar.gz"

  when: not node_exporter_check.stat.exists

- name: Check if blackbox_exporter is installed already
  stat:
    path: /usr/local/bin/blackbox_exporter
  register: blackbox_exporter_check

- name: Install blackbox_exporter
  block:
    - name: Get the latest published blackbox_exporter  # noqa command-instead-of-module
      # this will need to be changed from /releases to /releases/latest once a GA release has been made
      ansible.builtin.shell: |
        curl -s https://api.github.com/repos/prometheus/blackbox_exporter/releases/latest \
          | grep -m 1 tag_name \
          | cut -d '"' -f 4 | cut -c 2-
      changed_when: false
      run_once: true
      register: _blackbox_exporter_request

    - name: Set the blackbox_exporter Version
      ansible.builtin.set_fact:
        blackbox_exporter_version: "{{ _blackbox_exporter_request.stdout | string }}"

    - name: Blackbox Exporter Version
      ansible.builtin.debug:
        msg: "Blackbox Exporter Version: {{ blackbox_exporter_version }}"

    - name: Set the blackbox_exporter Download URL
      ansible.builtin.set_fact:
        blackbox_exporter_download_url: "https://github.com/prometheus/blackbox_exporter/releases/download/v{{ blackbox_exporter_version }}/blackbox_exporter-{{ blackbox_exporter_version }}.darwin-amd64.tar.gz"

    - name: Download blackbox_exporter to local folder
      ansible.builtin.get_url:
        url: "{{ blackbox_exporter_download_url }}"
        dest: "{{ downloads }}"
      register: _download_binary
      until: _download_binary is succeeded
      retries: 5
      delay: 2
      check_mode: false

    - name: Download blackbox_exporter and Unarchive to local folder
      ansible.builtin.unarchive:
        src: "{{ blackbox_exporter_download_url }}"
        dest: "{{ downloads }}"
        remote_src: true

    - name: Copy blackbox_exporter Binaries
      become: true
      ansible.builtin.copy:
        src: "{{ downloads }}/blackbox_exporter-{{ blackbox_exporter_version }}.darwin-amd64/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        mode: 0755
        owner: root
        group: wheel
      with_items:
        - blackbox_exporter

    - name: Cleanup blackbox_exporter Files
      ansible.builtin.file:
        state: absent
        path: "{{ downloads }}/blackbox_exporter-{{ blackbox_exporter_version }}.darwin-amd64"
      with_items:
        - "{{ downloads }}/blackbox_exporter-{{ blackbox_exporter_version }}.darwin-amd64"
        - "{{ downloads }}/blackbox_exporter-{{ blackbox_exporter_version }}.darwin-amd64.tar.gz"

  when: not blackbox_exporter_check.stat.exists
